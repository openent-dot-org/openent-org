// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ECNcloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using ECNcloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using ECNcloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\Pages\Account.razor"
using ECNcloud.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\Pages\Account.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\Pages\Account.razor"
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/Account")]
    public partial class Account : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 53 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\Pages\Account.razor"
       
    string key;
    string dir;
    string displayName;

    string inputtedKey;
    string correspondingDirectory;
    string correspondingDisplayName;
    string message;

    string checkKey;
    string checkDir;
    string isLoggedIn;
    bool hideSuccess = true;
    bool hideFailure = true;

    List<Userkey> _userkeys = new List<Userkey>();

    public Userkey NewUserkey { get; set; } = new();

    private async Task RefreshUserkeys()
    {
        _userkeys = await _service.GetUserkeyAsync();
    }

    private async Task AddNewUserkey()
    {
        await _service.AddUserkeyAsync(NewUserkey);
        NewUserkey = new Userkey();
        await RefreshUserkeys();
    }

    private void StoreToDatabase()
    {
        NewUserkey = new Userkey();
        Rng rng = new Rng();
        string[] returns = rng.GetKeys();
        NewUserkey.Key = returns[0];
        NewUserkey.Subdirectory = returns[1];
        NewUserkey.DisplayName = displayName;
        AddNewUserkey();
        key = returns[0];
        dir = returns[1];
        SaveUserkey();
        Directory.CreateDirectory($"wwwroot/files/{dir}");
    }

    public async Task SaveUserkey()
    {
        await _protectedLocalStorage.SetAsync("userkey", key);
        await _protectedLocalStorage.SetAsync("userdir", dir);
        await _protectedLocalStorage.SetAsync("dname", displayName);

        var result = await _protectedLocalStorage.GetAsync<string>("userkey");
        string key2 = result.Success ? result.Value : "";
        var result2 = await _protectedLocalStorage.GetAsync<string>("userdir");
        string dir2 = result2.Success ? result2.Value : "";
        var result3 = await _protectedLocalStorage.GetAsync<string>("dname");
        string dname2 = result3.Success ? result3.Value : "";

        Console.WriteLine(key2);
        Console.WriteLine(dir2);
        Console.WriteLine(dname2);
    }

    //

    List<Userkey> _userkeys2 = new List<Userkey>();

    private async Task Read()
    {
        _userkeys2 = await _userkeyServices.GetUserkeyAsync();
        if (CheckForDir())
        {
            await _protectedLocalStorage.SetAsync("userkey", inputtedKey);
            await _protectedLocalStorage.SetAsync("userdir", correspondingDirectory);
            await _protectedLocalStorage.SetAsync("dname", correspondingDisplayName);
        }
        else
        {
            message = "Error: Invalid key. Please ensure you are using your key and not your display name.";
        }
    }

    private bool CheckForDir()
    {
        for (int i = 0; i < _userkeys2.Count; ++i)
        {
            if (_userkeys2.ElementAt(i).Key.Equals(inputtedKey))
            {
                correspondingDirectory = _userkeys2.ElementAt(i).Subdirectory;
                return true;
            }
        }
        return false;
    }
    
    //

    private void CheckAccountStatus()
    {
        Check();
    }

    private async Task Check()
    {
    //read from browser's localstorage
        var result = await _protectedLocalStorage.GetAsync<string>("userkey");
        checkKey = result.Success ? result.Value : "";
        var result2 = await _protectedLocalStorage.GetAsync<string>("userdir");
        checkDir = result2.Success ? result2.Value : "";
        
        Console.WriteLine($"{key} {dir} {displayName}");

    //if userkey and userdir both exist
        if (!checkKey.Equals("") && !checkDir.Equals(""))
        {
            hideSuccess = false;
            hideFailure = true;
        }
        else
        {
            hideFailure = false;
            hideSuccess = true;
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedLocalStorage _protectedLocalStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserkeyServices _userkeyServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserkeyServices _service { get; set; }
    }
}
#pragma warning restore 1591
