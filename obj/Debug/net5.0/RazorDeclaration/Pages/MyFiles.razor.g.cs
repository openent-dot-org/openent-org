// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ECNcloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using ECNcloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using ECNcloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\Pages\MyFiles.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\Pages\MyFiles.razor"
using ECNcloud.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\Pages\MyFiles.razor"
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\Pages\MyFiles.razor"
using FileInfo = System.IO.FileInfo;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/MyFiles")]
    public partial class MyFiles : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 113 "C:\Users\root\Desktop\OpenentOrg\ECNcloud\Pages\MyFiles.razor"
       
    string key;
    string dir;
    string displayName;
    string message;
    bool accountErrorMessageHidden = true;
    bool hideUploaderAndFileListing = true;
    string[] files;

    string filepath = "Select a file";
    string filesize = "File size";
    string created = "Time created";
    string modified = "Time modified";
    string shareLink = "Share link";
    string downloadLink = "Download link";

    private void GetSelectedFileInfo(string origPath)
    {
        string path = $"wwwroot/{origPath}";
        FileInfo fi = new FileInfo(path);

    //FILE PATH
        double size = fi.Length; //SIZE
        DateTime created2 = fi.CreationTimeUtc; //CREATION TIME
        DateTime modified2 = fi.LastWriteTimeUtc; //MODIFIED TIME
        string shareLink2 = GetShareLink(path); //SHARE LINK
        string downloadLink2 = origPath; //DOWNLOAD LINK

        filepath = Path.GetFileName(path);
        filesize = $"{BytesConversion.BytesToKiB(size)} KiB";
        created = $"Created {created2.ToString("yyyy-MM-dd @ HH:mm:ss UTC")}";
        modified = $"Modified {modified2.ToString("yyyy-MM-dd @ HH:mm:ss UTC")}";
        shareLink = shareLink2;
        downloadLink = downloadLink2;
    }

    private void DeleteFile(string path)
    {
        File.Delete(path);
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

    private string GetShareLink(string path)
    {
        string x = path;
        Console.WriteLine(x);
        x = x.Substring(14);
        string y = ReplaceLastOccurrence(x, ".", "/");
        Console.WriteLine(y);
        return $"viewfile/{y}";
    }

    public static string ReplaceLastOccurrence(string Source, string Find, string Replace)
    {
        int place = Source.LastIndexOf(Find);

        if (place == -1)
            return Source;

        string result = Source.Remove(place, Find.Length).Insert(place, Replace);
        return result;
    }

    private async Task Unlock()
    {
    //read from browser's localstorage
        var result = await _protectedLocalStorage.GetAsync<string>("userkey");
        key = result.Success ? result.Value : "";
        var result2 = await _protectedLocalStorage.GetAsync<string>("userdir");
        dir = result2.Success ? result2.Value : "";
        var result3 = await _protectedLocalStorage.GetAsync<string>("dname");
        displayName = result3.Success ? result3.Value : "";

        Console.WriteLine($"{key} {dir} {displayName}");

    //if userkey or userdir does not exist
        if (key.Equals("") || dir.Equals(""))
        {
            accountErrorMessageHidden = false;
            Console.WriteLine("[ Error ] Key or directory missing.");
        }
        else
        {
            hideUploaderAndFileListing = false;
        }

    //scan through directory, store file paths in an array
        if (Directory.Exists($"wwwroot/files/{dir}"))
        {
            files = Directory.GetFiles($"wwwroot/files/{dir}");
        }
    }

    private void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            Directory.CreateDirectory($"wwwroot/files/{dir}");
            var path = $"wwwroot/files/{dir}/{file.FileInfo.Name}";
            Console.WriteLine(path);
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager _navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedLocalStorage _protectedLocalStorage { get; set; }
    }
}
#pragma warning restore 1591
