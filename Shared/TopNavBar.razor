@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage _protectedLocalStorage
@inject NavigationManager _navigationManager

<header class="p-3 bg-dark text-white">
    <div class="container">
        <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">
            <a href="/" class="d-flex align-items-center mb-2 mb-lg-0 text-white text-decoration-none">
                <svg class="bi me-2" width="40" height="32" role="img" aria-label="Bootstrap">
                    <use xlink:href="#bootstrap"/>
                </svg>
            </a>

            <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0">
                <li>
                    <a href="/" class="nav-link px-2 text-secondary">Home</a>
                </li>
                <li>
                    <a href="/myfiles" class="nav-link px-2 text-white">Files</a>
                </li>
                <li>
                    <a href="/nics" class="nav-link px-2 text-white">Messages</a>
                </li>
                <li>
                    <a href="/nics" class="nav-link px-2 text-white">Calendar</a>
                </li>
            </ul>

            <!--
            <form class="col-12 col-lg-auto mb-3 mb-lg-0 me-lg-3">
                <input type="search" class="form-control form-control-dark" placeholder="Search..." aria-label="Search">
            </form>
            -->

            <div class="text-end">
                <button type="button" class="btn btn-warning" @onclick="ToAccount">Account</button>
                <button type="button" class="btn btn-outline-light me-2" @onclick="ToLogout">Logout</button>
            </div>
        </div>
    </div>
</header>

@code {

    private void ToAccount()
    {
        _navigationManager.NavigateTo("/account");
    }

    private void ToLogout()
    {
        Delete();
    }

    private async Task Delete()
    {
        await _protectedLocalStorage.DeleteAsync("userkey");
        await _protectedLocalStorage.DeleteAsync("userdir");
        await _protectedLocalStorage.DeleteAsync("dname");
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

}